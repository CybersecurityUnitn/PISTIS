#!/usr/bin/env python3
import sys, os, binascii
import hmac, hashlib
sys.path += [ os.path.join(os.path.split(__file__)[0], 'libs') ]
import serial
from intelhex import IntelHex

# 32-byte key
key = b'\x6e\x26\x88\x6e\x4e\x07\x07\xe1\xb3\x0f\x24\x16\x0e\x99\xb9\x12\xe4\x61\xc4\x24\xb3\x0f\x24\x16\x0e\x99\xb9\x12\xe4\x61\xc4\x24'
nonce = b'\xFF\x2B\xA8\x3e\x4e\x07\x07\xe1\xb3\x0f\x24\x16\x0e\x99\xb9\x12\xe4\x61\xc4\x24\xb3\x0f\x24\x16\x0e\x99\xb9\x12\xe4\x61\xc4\x4C\
\xFF\x2B\xA8\x6e\x4e\x07\x07\xe1\xb3\x0f\x24\x16\x0e\x99\xb9\x12\xe4\x61\xc4\x24\xb3\x0f\x24\x16\x0e\x99\xb9\x12\xe4\x61\xc4\x4C'


# example data - 1024 bytes long

data = b'\xB2\x40\x80\x5A\x5C\x01\xB1\x13\x32\x19\x80\x00\x0A\x44\x0A\x14\
\x0A\x4C\x4D\x43\xB0\x13\x2E\x44\x2C\x01\x42\x44\x3E\x0C\x20\x00\
\x9E\x00\x00\x00\x01\x24\x4E\x13\x0C\x4A\xB0\x13\x60\x45\x6A\x14\
\xB1\x00\x06\x00\x07\x4C\x71\x0D\x00\x00\x2C\x01\x42\x44\x3A\x0C\
\x3C\x00\xC9\x0C\xA9\x00\x3C\x00\x9A\x00\x00\x00\x04\x20\xA1\x00\
\x06\x00\x64\x16\x10\x01\x38\x0A\x86\x00\x14\x4A\x04\x00\x34\x53\
\x44\x0E\x44\x0D\x40\x18\x0D\x44\x40\x18\x0E\x44\x0D\x93\x1A\x34\
\x8E\x00\x00\x00\x9E\x00\x00\x00\xEA\x27\x0C\x0A\x8A\x93\x04\x00\
\x6C\x20\x9C\x00\x00\x00\x69\x24\x79\x0C\x00\x00\x98\x00\x00\x00\
\x02\x24\xCC\x08\x4E\x13\xCC\x0A\xB0\x13\x00\x00\x0C\x09\xCA\x0C\
\x80\x00\x48\x44\x00\x18\xC1\x93\x00\x00\x0E\x24\x98\x00\x00\x00\
\x04\x20\xA4\x0F\xFF\xFF\x80\x00\x64\x44\xCC\x04\x4C\x06\xEC\x08\
\x00\x18\xEC\x91\x80\x00\xF5\x23\xC6\x04\x46\x06\xCC\x0A\xEC\x06\
\x35\x0C\x06\x00\x1F\x4A\x04\x00\x3F\x53\x0F\x9E\x27\x20\x8A\x4D\
\x04\x00\x95\x00\x00\x00\xE5\x27\x91\x4A\x04\x00\x04\x00\x98\x00\
\x00\x00\x11\x24\x5C\x43\xB0\x13\xE2\xE2\x0D\x4C\x0E\x4C\x0F\x4C\
\x4E\x18\x0F\x11\x1C\x48\x00\x01\x0C\xFD\x1B\x48\x02\x01\x0B\xFF\
\x0C\xDB\x0C\x93\x10\x20\x45\x13\x9A\x91\x04\x00\x04\x00\x8D\x23\
\x00\x18\xC9\x9A\x00\x00\xC5\x27\x80\x00\x3A\x44\x00\x18\xCC\x43\
\x06\x00\x80\x00\xE2\x44\xE6\x08\x0C\x06\x1D\xF8\x04\x01\x1E\x48\
\x06\x01\x0E\xFF\x0D\xDE\x0D\x93\x05\x20\xCD\x0C\x0C\x47\x45\x13\
\x80\x00\x18\x45\x45\x13\x80\x00\x18\x45\xC9\x0A\x80\x00\x9E\x44\
\x80\x00\x60\x45\x0A\x14\x08\x14\x06\x14\x04\x14\xCA\x0D\xC6\x0D\
\xE6\x0E\xDD\x0C\x02\x2C\xDC\x06\x09\x28\xCE\x0C\xDA\x06\x0E\x24\
\xFE\x4A\x00\x00\xAE\x00\x01\x00\x80\x00\x7C\x45\xCD\x0E\x00\x18\
\x7D\xE3\x4A\x43\xAA\x0F\xFF\xFF\xDD\x0A\x05\x20\x04\x16\x06\x16\
\x08\x16\x0A\x16\x10\x01\xC4\x0E\xE4\x0A\xE4\x0C\xC8\x06\xE8\x0A\
\xE4\x48\x00\x00\x80\x00\x94\x45\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\
\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF'

def main(argv):
   ''' Please uncommment these lines to be able to give the object file (to be attested) and serial port (to establish communication) as input to the verifier '''
   '''   
   if len(argv) != 2:
      print('challenger.py <hexfile> <serialport>')
      sys.exit(2)

   # Check if hexfile exists
   hexfile = argv[0]
   if not os.path.isfile(hexfile):
      print("ERROR: File not found:", hexfile)
      sys.exit(2)
   ih = IntelHex(hexfile)

   ser = serial.Serial(argv[1], 57600) #adjust the baud rate if different
   '''

   # Generate nonce - For now, this is commented as the nonce is hard coded
   '''
   nonce = os.urandom(64)
   print("Nonce: ")
   print(binascii.hexlify(nonce))
   '''
   
   # Send the nonce to the prover - - For now, this is commented as the nonce is hard coded at the prover side
   #ser.write(nonce)

   # Wait for attestation report --> 32-byte MAC value
   #answer = ser.read(32)
   print("Prover's digest: ")
   #print(binascii.hexlify(answer))

   # Calc MAC
   hmac_gen = hmac.new(key, None, hashlib.sha256)
   #hmac_gen.update(ih.tobinstr(0,128*1024-1))
   hmac_gen.update(nonce)
   hmac_gen.update(data)
   print("Verifier's digest:");
   print(binascii.hexlify(hmac_gen.digest()))

if __name__ == "__main__":
     main(sys.argv[1:])